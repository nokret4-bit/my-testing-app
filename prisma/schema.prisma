generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookings {
  id            String        @id
  code          String        @unique
  userId        String?
  facilityId    String
  startDate     DateTime
  endDate       DateTime
  guests        Int           @default(1)
  status        BookingStatus @default(PENDING)
  customerName  String
  customerEmail String
  customerPhone String?
  totalAmount   Decimal       @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  confirmedAt   DateTime?
  cancelledAt   DateTime?
  facilities    facilities    @relation(fields: [facilityId], references: [id])
  users         users?        @relation(fields: [userId], references: [id])
  payments      payments?

  @@index([code])
  @@index([customerEmail])
  @@index([facilityId, startDate, endDate])
  @@index([status])
}

model facilities {
  id          String       @id
  name        String
  kind        FacilityKind
  description String?
  capacity    Int
  price       Decimal      @db.Decimal(10, 2)
  photos      String[]
  amenities   String[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  bookings    bookings[]

  @@index([isActive])
  @@index([kind])
}

model payments {
  id            String        @id
  bookingId     String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  paidAt        DateTime?
  bookings      bookings      @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([transactionId])
}

model users {
  id            String          @id
  name          String
  email         String          @unique
  phone         String?
  passwordHash  String?
  role          Role            @default(GUEST)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  bookings      bookings[]
  activity_logs activity_logs[]

  @@index([email])
  @@index([role])
}

model activity_logs {
  id          String       @id @default(cuid())
  userId      String?
  action      ActivityType
  entityType  String // "booking", "facility", "user", "payment"
  entityId    String?
  description String
  metadata    Json? // Store additional data like old/new values
  ipAddress   String?
  createdAt   DateTime     @default(now())
  users       users?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType])
  @@index([createdAt])
}

enum ActivityType {
  LOGIN
  LOGOUT
  CREATE_BOOKING
  UPDATE_BOOKING
  DELETE_BOOKING
  CHECKIN_BOOKING
  CHECKOUT_BOOKING
  CREATE_FACILITY
  UPDATE_FACILITY
  DELETE_FACILITY
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  CREATE_PAYMENT
  UPDATE_PAYMENT
  DELETE_PAYMENT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum FacilityKind {
  ROOM
  COTTAGE
  HALL
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Role {
  GUEST
  STAFF
  ADMIN
}
